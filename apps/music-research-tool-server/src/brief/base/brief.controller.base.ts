/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BriefService } from "../brief.service";
import { BriefCreateInput } from "./BriefCreateInput";
import { Brief } from "./Brief";
import { BriefFindManyArgs } from "./BriefFindManyArgs";
import { BriefWhereUniqueInput } from "./BriefWhereUniqueInput";
import { BriefUpdateInput } from "./BriefUpdateInput";
import { RecommendationFindManyArgs } from "../../recommendation/base/RecommendationFindManyArgs";
import { Recommendation } from "../../recommendation/base/Recommendation";
import { RecommendationWhereUniqueInput } from "../../recommendation/base/RecommendationWhereUniqueInput";

export class BriefControllerBase {
  constructor(protected readonly service: BriefService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Brief })
  async createBrief(@common.Body() data: BriefCreateInput): Promise<Brief> {
    return await this.service.createBrief({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Brief] })
  @ApiNestedQuery(BriefFindManyArgs)
  async briefs(@common.Req() request: Request): Promise<Brief[]> {
    const args = plainToClass(BriefFindManyArgs, request.query);
    return this.service.briefs({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Brief })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async brief(
    @common.Param() params: BriefWhereUniqueInput
  ): Promise<Brief | null> {
    const result = await this.service.brief({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Brief })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBrief(
    @common.Param() params: BriefWhereUniqueInput,
    @common.Body() data: BriefUpdateInput
  ): Promise<Brief | null> {
    try {
      return await this.service.updateBrief({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Brief })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBrief(
    @common.Param() params: BriefWhereUniqueInput
  ): Promise<Brief | null> {
    try {
      return await this.service.deleteBrief({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recommendations")
  @ApiNestedQuery(RecommendationFindManyArgs)
  async findRecommendations(
    @common.Req() request: Request,
    @common.Param() params: BriefWhereUniqueInput
  ): Promise<Recommendation[]> {
    const query = plainToClass(RecommendationFindManyArgs, request.query);
    const results = await this.service.findRecommendations(params.id, {
      ...query,
      select: {
        brief: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        music: {
          select: {
            id: true,
          },
        },

        recommendedAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recommendations")
  async connectRecommendations(
    @common.Param() params: BriefWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        connect: body,
      },
    };
    await this.service.updateBrief({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recommendations")
  async updateRecommendations(
    @common.Param() params: BriefWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        set: body,
      },
    };
    await this.service.updateBrief({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recommendations")
  async disconnectRecommendations(
    @common.Param() params: BriefWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        disconnect: body,
      },
    };
    await this.service.updateBrief({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/submit-brief")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SubmitBrief(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SubmitBrief(body);
  }

  @common.Post("/brief/submit/details")
  @swagger.ApiOkResponse({
    type: Brief,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SubmitBriefDetails(
    @common.Body()
    body: string
  ): Promise<Brief> {
    return this.service.SubmitBriefDetails(body);
  }

  @common.Get("/:id/submit-music-brief")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SubmitMusicBrief(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SubmitMusicBrief(body);
  }
}

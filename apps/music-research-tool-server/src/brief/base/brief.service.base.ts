/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Brief as PrismaBrief,
  Recommendation as PrismaRecommendation,
} from "@prisma/client";
import { CreateBriefArgs } from "./CreateBriefArgs";
import { Brief } from "./Brief";

export class BriefServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BriefCountArgs, "select">): Promise<number> {
    return this.prisma.brief.count(args);
  }

  async briefs(args: Prisma.BriefFindManyArgs): Promise<PrismaBrief[]> {
    return this.prisma.brief.findMany(args);
  }
  async brief(args: Prisma.BriefFindUniqueArgs): Promise<PrismaBrief | null> {
    return this.prisma.brief.findUnique(args);
  }
  async createBrief(args: Prisma.BriefCreateArgs): Promise<PrismaBrief> {
    return this.prisma.brief.create(args);
  }
  async updateBrief(args: Prisma.BriefUpdateArgs): Promise<PrismaBrief> {
    return this.prisma.brief.update(args);
  }
  async deleteBrief(args: Prisma.BriefDeleteArgs): Promise<PrismaBrief> {
    return this.prisma.brief.delete(args);
  }

  async findRecommendations(
    parentId: string,
    args: Prisma.RecommendationFindManyArgs
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.brief
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recommendations(args);
  }
  async SubmitBrief(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async SubmitBriefDetails(args: CreateBriefArgs): Promise<Brief> {
    throw new Error("Not implemented");
  }
  async SubmitMusicBrief(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}

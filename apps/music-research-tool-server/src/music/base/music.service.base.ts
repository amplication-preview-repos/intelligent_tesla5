/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Music as PrismaMusic,
  Recommendation as PrismaRecommendation,
} from "@prisma/client";
import { CreateMusicArgs } from "./CreateMusicArgs";
import { Music } from "./Music";

export class MusicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MusicCountArgs, "select">): Promise<number> {
    return this.prisma.music.count(args);
  }

  async musicItems(args: Prisma.MusicFindManyArgs): Promise<PrismaMusic[]> {
    return this.prisma.music.findMany(args);
  }
  async music(args: Prisma.MusicFindUniqueArgs): Promise<PrismaMusic | null> {
    return this.prisma.music.findUnique(args);
  }
  async createMusic(args: Prisma.MusicCreateArgs): Promise<PrismaMusic> {
    return this.prisma.music.create(args);
  }
  async updateMusic(args: Prisma.MusicUpdateArgs): Promise<PrismaMusic> {
    return this.prisma.music.update(args);
  }
  async deleteMusic(args: Prisma.MusicDeleteArgs): Promise<PrismaMusic> {
    return this.prisma.music.delete(args);
  }

  async findRecommendations(
    parentId: string,
    args: Prisma.RecommendationFindManyArgs
  ): Promise<PrismaRecommendation[]> {
    return this.prisma.music
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recommendations(args);
  }
  async CatalogMusic(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async CatalogMusicTrack(args: CreateMusicArgs): Promise<Music> {
    throw new Error("Not implemented");
  }
  async CatalogNewMusic(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MusicService } from "../music.service";
import { MusicCreateInput } from "./MusicCreateInput";
import { Music } from "./Music";
import { MusicFindManyArgs } from "./MusicFindManyArgs";
import { MusicWhereUniqueInput } from "./MusicWhereUniqueInput";
import { MusicUpdateInput } from "./MusicUpdateInput";
import { RecommendationFindManyArgs } from "../../recommendation/base/RecommendationFindManyArgs";
import { Recommendation } from "../../recommendation/base/Recommendation";
import { RecommendationWhereUniqueInput } from "../../recommendation/base/RecommendationWhereUniqueInput";

export class MusicControllerBase {
  constructor(protected readonly service: MusicService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Music })
  async createMusic(@common.Body() data: MusicCreateInput): Promise<Music> {
    return await this.service.createMusic({
      data: data,
      select: {
        artist: true,
        createdAt: true,
        duration: true,
        genre: true,
        id: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Music] })
  @ApiNestedQuery(MusicFindManyArgs)
  async musicItems(@common.Req() request: Request): Promise<Music[]> {
    const args = plainToClass(MusicFindManyArgs, request.query);
    return this.service.musicItems({
      ...args,
      select: {
        artist: true,
        createdAt: true,
        duration: true,
        genre: true,
        id: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Music })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async music(
    @common.Param() params: MusicWhereUniqueInput
  ): Promise<Music | null> {
    const result = await this.service.music({
      where: params,
      select: {
        artist: true,
        createdAt: true,
        duration: true,
        genre: true,
        id: true,
        releaseDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Music })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMusic(
    @common.Param() params: MusicWhereUniqueInput,
    @common.Body() data: MusicUpdateInput
  ): Promise<Music | null> {
    try {
      return await this.service.updateMusic({
        where: params,
        data: data,
        select: {
          artist: true,
          createdAt: true,
          duration: true,
          genre: true,
          id: true,
          releaseDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Music })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMusic(
    @common.Param() params: MusicWhereUniqueInput
  ): Promise<Music | null> {
    try {
      return await this.service.deleteMusic({
        where: params,
        select: {
          artist: true,
          createdAt: true,
          duration: true,
          genre: true,
          id: true,
          releaseDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/recommendations")
  @ApiNestedQuery(RecommendationFindManyArgs)
  async findRecommendations(
    @common.Req() request: Request,
    @common.Param() params: MusicWhereUniqueInput
  ): Promise<Recommendation[]> {
    const query = plainToClass(RecommendationFindManyArgs, request.query);
    const results = await this.service.findRecommendations(params.id, {
      ...query,
      select: {
        brief: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        music: {
          select: {
            id: true,
          },
        },

        recommendedAt: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recommendations")
  async connectRecommendations(
    @common.Param() params: MusicWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        connect: body,
      },
    };
    await this.service.updateMusic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recommendations")
  async updateRecommendations(
    @common.Param() params: MusicWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        set: body,
      },
    };
    await this.service.updateMusic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recommendations")
  async disconnectRecommendations(
    @common.Param() params: MusicWhereUniqueInput,
    @common.Body() body: RecommendationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recommendations: {
        disconnect: body,
      },
    };
    await this.service.updateMusic({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/catalog-music")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CatalogMusic(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CatalogMusic(body);
  }

  @common.Post("/music/catalog")
  @swagger.ApiOkResponse({
    type: Music,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CatalogMusicTrack(
    @common.Body()
    body: string
  ): Promise<Music> {
    return this.service.CatalogMusicTrack(body);
  }

  @common.Get("/:id/catalog-new-music")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CatalogNewMusic(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.CatalogNewMusic(body);
  }
}
